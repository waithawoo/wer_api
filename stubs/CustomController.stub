<?php

namespace App\Http\Controllers;

use App\Http\Controllers\ApiController;
use Illuminate\Http\Request;
use App\Http\Requests\{{controllerName}}\CreateRequest;
use App\Http\Requests\{{controllerName}}\UpdateRequest;
use App\Http\Requests\{{controllerName}}\ListingRequest;
use App\Http\Repositories\{{controllerName}}Repo;

class {{controllerName}}Controller extends ApiController
{
    protected ${{sm_controllerName}}_repo;

    public function __construct({{controllerName}}Repo ${{sm_controllerName}}_repo)
    {
        $this->{{sm_controllerName}}_repo = ${{sm_controllerName}}_repo;
    }

    public function index(ListingRequest $request)
    {
        try {
            $validated = $request->validated();
            $per_page = array_key_exists('per_page', $validated) ? $validated['per_page'] : 20;
            $page = array_key_exists('page', $validated) ? $validated['page'] : 1;
            $res_data = $this->{{sm_controllerName}}_repo->getDataWithPigination($per_page, $page);
            return $this->paginatedSuccessResponse($res_data, 200, '{{controllerName}} Lists');
        } catch (\Exception $e) {
            logger()->error($e);
            return $this->errorResponse('Something went wrong!', 500);
        }
    }

    public function findOrFail($id)
    {
        try {
            if (! is_numeric($id)) {
                return $this->errorResponse('ID must be an integer!', 422);
            }
            ${{sm_controllerName}} = $this->{{sm_controllerName}}_repo->find($id);
            if (${{sm_controllerName}}) {
                return $this->successResponse(${{sm_controllerName}}, 200, '{{sm_controllerName}}');
            } else {
                return $this->errorResponse('{{controllerName}} not found', 404);
            }
        } catch (\Exception $e) {
            logger()->error($e);
            return $this->errorResponse('Something went wrong!', 500);
        }
    }

    public function create(CreateRequest $request)
    {
        try {
            $validated = $request->validated();
            $result = $this->{{sm_controllerName}}_repo->create($validated);
            return $this->successResponse($result, 200, '{{controllerName}} is created successfully');
        } catch (\Exception $e) {
            logger()->error($e);
            return $this->errorResponse('Something went wrong!', 500);
        }
    }

    public function update(UpdateRequest $request, $id)
    {
        try {
            $validated = $request->validated();
            ${{sm_controllerName}} = $this->{{sm_controllerName}}_repo->find($id);
            if (${{sm_controllerName}}) {
                $result = $this->{{sm_controllerName}}_repo->update($id, $validated);
                return $this->successResponse($result, 200, '{{controllerName}} is updated successfully');
            } else {
                return $this->errorResponse('Something went wrong!', 400);
            }
        } catch (\Exception $e) {
            logger()->error($e);
            return $this->errorResponse('Something went wrong!', 500);
        }

    }

    public function delete($id)
    {
        try {
            if (! is_numeric($id)) {
                return $this->errorResponse('ID must be an integer!', 422);
            }
            ${{sm_controllerName}} = $this->{{sm_controllerName}}_repo->find($id);
            if (${{sm_controllerName}}) {
                if ($this->{{sm_controllerName}}_repo->delete($id)) {
                    return $this->successResponse([], 200, '{{controllerName}} deleted successfully!');
                }
            } else {
                return $this->errorResponse('{{controllerName}} not found!', 500);
            }
        } catch (\Exception $e) {
            logger()->error($e);
            return $this->errorResponse('Something went wrong!', 500);
        }
    }
}
